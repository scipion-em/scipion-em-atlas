# **************************************************************************
# *
# * Authors:   Pablo Conesa       (pconesa@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 3 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# *
# **************************************************************************
import os
import re
import tempfile
import xml.etree.ElementTree as ET

from PIL import Image
from pwem.emlib.image import ImageHandler

from atlas.collage import Collage
from atlas.objects import AtlasLocation

ATLAS_ATTR = "atlasLoc"
GRID_ = "GRID_"
GRIDSQUARE_MD = GRIDSQUARE_IMG = "GridSquare_"
TARGET_LOCATION_FILE_PATTERN = "TargetLocation_%s.dm"


def setAtlasToMovie(movie, atlasLocation):

    setattr(movie, ATLAS_ATTR, atlasLocation)


def getAtlasFromMovie(movie):

    return getattr(movie, ATLAS_ATTR, None)


class EPUParser:
    """ Parses ATLAS files generated by EPU. """
    # EPU images name example:
    # GRID_05_DATA_Images - Disc1_GridSquare_1818984_DATA_FoilHole_2872127_Data_1821842_1821843_20190904_0831_Fractions_global_shifts.png
    def __init__(self, importPath):
        self._holesLocations = {}
        self.importPath = importPath

    def _getTargetLocationDmPath(self, atlasLocation):
        """ Returns the path of the TargetLocation dm file based on the altasLocation.hole identifier (FoilHole number)"""
        return os.path.join(self._getGridSquareMDFolder(atlasLocation),
                            TARGET_LOCATION_FILE_PATTERN % atlasLocation.hole)

    def _getCommonPathToAllGrids(self):
        """ Returns the path common to all grids: Assumes path contains GRID_"""
        return self.importPath.split(GRID_)[0]

    def getAllGRIDFolders(self):
        commonPath = self._getCommonPathToAllGrids()
        for gridFolder in os.listdir(commonPath):
            fullPath = os.path.join(commonPath,gridFolder)
            # If it's a folder and starts with GRID_
            if os.path.isdir(fullPath) and gridFolder.startswith(GRID_):
                yield gridFolder, fullPath

    def getAllAtlas(self):
        """ Returns all atlas files present under the import path"""
        for gridFolder, fullPath in self.getAllGRIDFolders():

            # Get the atlas folder
            atlasFolder = self._getAtlasFolderFn(fullPath)
            yield gridFolder, self._getAtlasMrcImageFn(atlasFolder)

    def _getGridFolder(self, atlasLocation):
        """ Returns the path for a specific GRID"""
        return os.path.join(self._getCommonPathToAllGrids(), GRID_ + atlasLocation.grid.get())

    def _getMetadataFolder(self, atlasLocation):
        """ Returns the metadata folder for a specific GRID: Assumes the following file structure:
        GRID_XX/DATA/Metadata"""
        return os.path.join(self._getGridFolder(atlasLocation), "DATA", "Metadata")

    def _getGridSquareMDFolder(self, atlasLocation):
        """ Returns the gridSquare folder under metadata folder"""

        return os.path.join(self._getMetadataFolder(atlasLocation), GRIDSQUARE_MD + atlasLocation.gridSquare.get())

    def _getAtlasMrcImage(self, atlasLocation):
        """ Returns the atlas image under ATLAS folder named Atlas_1.mrc"""
        return self._getAtlasMrcImageFn(self._getAtlasFolder(atlasLocation))

    def _getAtlasFolder(self, atlasLocation):
        """ Returns the ATLAS folder. Assumes it is under GRID_XX folder and is named ATLAS"""
        return self._getAtlasFolderFn(self._getGridFolder(atlasLocation))

    def getAtlasLocation(self, movie):
        """ Fills atlasLocation object with:grid, gridsquare, hole, x, and y location as appear in targetLocation file
        It assumes the filename contains all the ids in it:
        GRID_05_DATA_Images - Disc1_GridSquare_1818984_DATA_FoilHole_2872127_Data_1821842_1821843_20190904_0831_Fractions_global_shifts.png
        """
        movieFn = movie.getFileName()

        matchingString = GRID_ + "(\d*)_.*_" + GRIDSQUARE_IMG + "(\d*)_.*_FoilHole_(\d*)"

        m = re.search(matchingString, movieFn)
        atlasLocation = AtlasLocation()
        atlasLocation.grid.set(m.group(1))
        atlasLocation.gridSquare.set(m.group(2))
        atlasLocation.hole.set(m.group(3))
        x, y = self._getCoordinates(atlasLocation)
        atlasLocation.x.set(x)
        atlasLocation.y.set(y)

        return atlasLocation

    def _getCoordinates(self, atlasLocation):

        holeId = atlasLocation.hole.get()

        if holeId not in self._holesLocations:
            self._holesLocations[holeId] = self.findCooordinatesFromHoleId(atlasLocation)

        return self._holesLocations[holeId]

    def findCooordinatesFromHoleId(self, atlasLocation):

        targetLocationMDfile = self._getTargetLocationDmPath(atlasLocation)

        # Open the medatata file, is an xml
        root = ET.parse(targetLocationMDfile).getroot()

        x = 0
        y = 0

        # Find the StagePosition element
        for element in root:
            if "StagePosition" in element.tag:

                # Get the coordinates
                for stageChild in element:

                    lastChar = stageChild.tag[-1]

                    # Assuming order
                    if "X" == lastChar:
                        x = stageChild.text
                    elif "Y" == lastChar:
                        y = stageChild.text
                        break

        return x, y

    @staticmethod
    def _getAtlasMrcImageFn(atlasFolder):
        """ Returns the atlas image under folder passed named Atlas_1.mrc"""
        return os.path.join(atlasFolder, "Atlas_1.mrc")

    @staticmethod
    def _getAtlasFolderFn(gridFolder):
        """ Having a grid folder, returns it's atlas folder"""
        return os.path.join(gridFolder, "ATLAS")

    @classmethod
    def getTileCoordinatesFromMrc(cls, tileMrcFile):
        """ Returns the coordinates for the mrc tile"""
        return  cls.getTileCoordinates(cls.getTileFileFromMrc(tileMrcFile))

    @staticmethod
    def getTileFileFromMrc(tileMrcFile):

        return tileMrcFile.replace(".mrc", ".dm")

    @staticmethod
    def getTileCoordinates(tileDmFile):
        """ Returns height, with, x, y from the xml fo the tile file"""
        # Open the medatata file, is an xml
        root = ET.parse(tileDmFile).getroot()

        x = 0
        y = 0

        # Find the StagePosition element
        for element in root:
            if "AtlasPixelPosition" in element.tag:

                # Get the coordinates
                for child in element:

                    lastChar = child.tag[-1]

                    # Assuming order
                    if "height" in child.tag:
                        height = int(child.text)
                    elif "width" in child.tag:
                        width = int(child.text)
                    elif "x" == lastChar:
                        x = int(child.text)
                    elif "y" == lastChar:
                        y = int(child.text)
                        break

        return height, width, x, y

    @staticmethod
    def convertMrc2Jpg(mrcfile, ouptut):
        ih = ImageHandler()
        ih.convert(inputObj=mrcfile, outputObj=ouptut)

    def createLRAtlas(self, atlasMRC, outputFile):
        return self.convertMrc2Jpg(atlasMRC, outputFile)

    @classmethod
    def createHRAtlas(cls, atlasFolder, outputFile):
        """ Create a full resolution atlas based on high resolution atlas mrc files"""

        # Get a temporary folder to work there
        tmpFolder = tempfile.TemporaryDirectory()
        print("Creating HR atlas at temporary folder:  %s" % tmpFolder.name)

        # Instantiate a collage object
        collage = Collage()

        # Cancel compression error with large files
        Image.MAX_IMAGE_PIXELS = None

        # For each mrc file:
        for file in os.listdir(atlasFolder):
            # If it's an mrc file
            if file.startswith("Tile") and file.endswith(".mrc"):

                mrcFn = os.path.join(atlasFolder,file)

                # Convert it to jpg
                # Compose new JPG file name
                newJpg = os.path.basename(file) + ".jpg"
                newJpg = os.path.join(tmpFolder.name, newJpg)

                # make the actual conversion
                EPUParser.convertMrc2Jpg(mrcFn, newJpg)
                h,w,x,y = cls.getTileCoordinatesFromMrc(mrcFn)

                # Coordinates are scaled, I see values relative to 907 height
                xmrc, ymrc, z, n = ImageHandler().getDimensions(mrcFn)
                ratio = xmrc/w

                # New coordinates using the ratio. 1 should remain 1
                newCoordsX = 1 if x == 1 else int(x * ratio)
                newCoordsY = 1 if y == 1 else int(y * ratio)

                collage.addImageFn(newJpg, (newCoordsX, newCoordsY))


        collage.save(outputFile)




